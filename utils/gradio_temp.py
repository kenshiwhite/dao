import gradio as gr
import numpy as np
import matplotlib.pyplot as plt
from app.app import CLIPBackend
from PIL import Image
import asyncio
from utils.database import Database

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ dropdown
dropdown = gr.Dropdown(choices=[], label="Recent Queries", visible=False)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ backend –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backend = CLIPBackend()
db = Database()
db.create_tables()

def create_classification_plot(probs, class_names):
    fig, ax = plt.subplots(figsize=(10, 5))
    y_pos = np.arange(len(probs))
    ax.barh(y_pos, probs, color='skyblue')
    ax.set_yticks(y_pos)
    ax.set_yticklabels(class_names)
    ax.set_xlabel("Probability")
    ax.set_title("Zero-Shot Classification Results")
    ax.invert_yaxis()
    plt.tight_layout()
    return fig

def classify_image(image, class_names=None):
    if image is None:
        raise gr.Error("Please upload an image for classification.")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    probs, classes = backend.classify_image(image, class_names)
    plot = create_classification_plot(probs, classes)
    similarity_map = backend.get_similarity_map(image)
    heatmap = backend.generate_heatmap(image, similarity_map)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_query("Image Classification", "image_classification.png")
    return plot, heatmap

def search_images_wrapper(query=None, query_image=None, top_k=4):
    return asyncio.run(search_images(query=query, query_image=query_image, top_k=top_k))

async def search_images(query=None, query_image=None, top_k=4):
    if not query and query_image is None:
        raise gr.Error("Please provide either a text query or an image.")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    results = await backend.search_images(query=query, query_image=query_image, top_k=top_k)

    images_with_labels = []
    heatmaps = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    for img_tensor, score in results:
        pil_img = backend.tensor_to_pil(img_tensor)
        label = f"Similarity: {score:.2f}"

        similarity_map = backend.get_similarity_map(pil_img)
        heatmap = backend.generate_heatmap(pil_img, similarity_map)

        images_with_labels.append((pil_img, label))
        heatmaps.append(heatmap)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_query(query if query else "Image Search", "search_image.png")
    return images_with_labels, heatmaps

def suggest_queries():
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    recent_queries = db.get_recent_queries(limit=5)
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º dropdown
    if recent_queries:
        return dropdown.update(choices=recent_queries, visible=True)
    else:
        return dropdown.update(visible=False)

def add_query_to_database(query):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if query:
        db.save_query(query, "search_query.png")
    return suggest_queries()

def fill_textbox(choice):
    return gr.Textbox.update(value=choice)

def create_interface():
    with gr.Blocks(title="CLIP Image Search and Classification with Heatmap") as demo:
        gr.Markdown("# üñºÔ∏è CLIP Image Search and Classification with Heatmap")

        with gr.Tab("Search"):
            with gr.Row():
                with gr.Column():
                    text_input = gr.Textbox(label="Text Query", placeholder="Enter your query...")
                    dropdown = gr.Dropdown(choices=[], label="Suggestions", interactive=True, visible=False)
                    image_query = gr.Image(label="Image Query", type="pil")
                    search_btn = gr.Button("Search")
                with gr.Column():
                    results_gallery = gr.Gallery(label="Search Results", columns=[2], object_fit="contain", allow_preview=True)
                    heatmap_gallery = gr.Gallery(label="Heatmaps", columns=[2], object_fit="contain", allow_preview=True)

            # –ü–æ–∫–∞–∑–∞—Ç—å dropdown –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ textbox
            text_input.focus(fn=suggest_queries, inputs=[], outputs=[dropdown])

            # –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            dropdown.change(fn=fill_textbox, inputs=[dropdown], outputs=[text_input])
            dropdown.change(fn=lambda: gr.Dropdown.update(visible=False), inputs=[], outputs=[dropdown])

            # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            text_input.submit(fn=add_query_to_database, inputs=[text_input], outputs=[dropdown])

            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            search_btn.click(
                fn=search_images_wrapper,
                inputs=[text_input, image_query],
                outputs=[results_gallery, heatmap_gallery]
            )

        with gr.Tab("Classification"):
            with gr.Row():
                with gr.Column():
                    classify_input = gr.Image(label="Upload Image", type="pil")
                    classify_btn = gr.Button("Classify")
                with gr.Column():
                    classify_output_plot = gr.Plot(label="Classification Results")
                    classify_output_heatmap = gr.Image(label="Generated Heatmap", type="pil")

            # –ö–Ω–æ–ø–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            classify_btn.click(
                fn=classify_image,
                inputs=[classify_input],
                outputs=[classify_output_plot, classify_output_heatmap]
            )

    return demo

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    demo = create_interface()
    demo.launch(show_api=False)
